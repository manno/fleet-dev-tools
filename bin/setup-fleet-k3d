#!/bin/sh

set -euxo pipefail

if [ ! -d ./charts/fleet ]; then
  echo "please change the current directory to the fleet repo checkout"
  exit 1
fi

# single cluster
kubectl config use-context k3d-k3s-default
k3d image import rancher/fleet:dev rancher/fleet-agent:dev -m direct
helm -n fleet-system install --create-namespace --wait fleet-crd charts/fleet-crd
helm -n fleet-system upgrade --install --create-namespace --wait fleet charts/fleet
kubectl -n fleet-system rollout status deploy/fleet-controller
kubectl -n fleet-system rollout status deploy/fleet-agent

# predefined cluster
# kubectl apply -f - <<EOF
# apiVersion: "fleet.cattle.io/v1alpha1"
# kind: Cluster
# metadata:
#   name: second
#   namespace: fleet-local
# spec:
#   clientID: "fake-random"
# EOF

# second cluster

kubectl apply -f - <<EOF
apiVersion: "fleet.cattle.io/v1alpha1"
kind: ClusterRegistrationToken
metadata:
  name: second-token
  namespace: fleet-local
spec:
  ttl: 12h
EOF
kubectl wait clusterregistrationtoken -n fleet-local --for=jsonpath='{.status.secretName}'=second-token second-token

token=$(kubectl get secret -n fleet-local second-token -o go-template='{{index .data "values" | base64decode}}' | yq eval .token -)

name=$(kubectl get -n default sa default -o=jsonpath='{.secrets[0].name}')
ca=$(kubectl get -n default secret "$name" -o go-template='{{index .data "ca.crt" | base64decode}}')
url="${url-172.18.0.1.omg.howdoi.website}"

kubectl config use-context k3d-k3s-second
k3d image import rancher/fleet-agent:dev -m direct -c k3s-second
helm -n fleet-system upgrade --install --create-namespace --wait fleet-agent charts/fleet-agent \
  --set-string labels.env=dev \
  --set apiServerCA="$ca" \
  --set apiServerURL="$url:36443" \
  --set clusterNamespace="fleet-local" \
  --set systemRegistrationNamespace="fleet-clusters-system" \
  --set token="$token"
  #--set clientID="fake-random" \

#kubectl config use-context k3d-k3s-default
#kubectl wait clusterregistrations -n fleet-local --for=jsonpath='{.status.granted}'=true
